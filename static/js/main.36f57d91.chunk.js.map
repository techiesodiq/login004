{"version":3,"sources":["undraw_authentication_fsn5.svg","undraw_personal_data_29co.svg","undraw_fingerprint_swrc.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","slideImg1","alt","slideImg2","slideImg3","icon","faFacebook","faTwitter","faYoutube","type","placeholder","faUser","faLock","fonts","font","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,wD,gBCA3CD,EAAOC,QAAU,IAA0B,uD,gBCA3CD,EAAOC,QAAU,IAA0B,qD,8PCoH5BC,MAtGf,WACC,OACC,yBAAKC,UAAU,OACd,yBAAKA,UAAU,aACd,yBAAKA,UAAU,SACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,cACd,+CAIA,yBAAKA,UAAU,0BACd,yBAAKC,IAAKC,IAAWF,UAAU,WAAWG,IAAI,KAC9C,yBAAKF,IAAKG,IAAWJ,UAAU,WAAWG,IAAI,KAC9C,yBAAKF,IAAKI,IAAWL,UAAU,WAAWG,IAAI,MAG/C,yBAAKH,UAAU,UAAf,eAEC,kBAAC,IAAD,CACCM,KAAMC,IACNP,UAAU,0BAEX,kBAAC,IAAD,CACCM,KAAME,IACNR,UAAU,yBAEX,kBAAC,IAAD,CACCM,KAAMG,IACNT,UAAU,2BAKb,yBAAKA,UAAU,aACd,4BAAQU,KAAK,SAASV,UAAU,kBAAhC,WAGA,8BACC,6BACC,kDACA,+CAGD,yBAAKA,UAAU,cACd,2BACCU,KAAK,OACLC,YAAY,QACZX,UAAU,eAEX,yBAAKA,UAAU,cACd,kBAAC,IAAD,CAAiBM,KAAMM,QAIzB,yBAAKZ,UAAU,cACd,2BACCU,KAAK,WACLC,YAAY,WACZX,UAAU,eAEX,yBAAKA,UAAU,cACd,kBAAC,IAAD,CAAiBM,MAAOM,IAAQC,SAIlC,4BAAQH,KAAK,SAASV,UAAU,iBAAhC,cAQL,kBAAC,IAAD,CACCc,MAAO,CACN,CACCC,KAAM,oBAKT,kBAAC,IAAD,CACCD,MAAO,CACN,CACCC,KAAM,iBAKT,kBAAC,IAAD,CACCD,MAAO,CACN,CACCC,KAAM,gBC/FQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.36f57d91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/undraw_authentication_fsn5.5911f723.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_personal_data_29co.d7b83c26.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw_fingerprint_swrc.597d5277.svg\";","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport slideImg1 from \"./undraw_authentication_fsn5.svg\";\nimport slideImg2 from \"./undraw_personal_data_29co.svg\";\nimport slideImg3 from \"./undraw_fingerprint_swrc.svg\";\nimport \"./App.css\";\nimport {\n\tfaFacebook,\n\tfaYoutube,\n\tfaTwitter,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser, faLock } from \"@fortawesome/free-solid-svg-icons\";\nimport GoogleFontLoader from \"react-google-font-loader\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"panel\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col liquid\">\n\t\t\t\t\t\t\t<h4>Screen Concepts</h4>\n\n\t\t\t\t\t\t\t{/* Carousel */}\n\n\t\t\t\t\t\t\t<div className=\"owl-carousel owl-theme\">\n\t\t\t\t\t\t\t\t<img src={slideImg1} className=\"slideImg\" alt=\"\" />\n\t\t\t\t\t\t\t\t<img src={slideImg2} className=\"slideImg\" alt=\"\" />\n\t\t\t\t\t\t\t\t<img src={slideImg3} className=\"slideImg\" alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"follow\">\n\t\t\t\t\t\t\t\tFollow us on\n\t\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\t\ticon={faFacebook}\n\t\t\t\t\t\t\t\t\tclassName=\"userIcon facebookIcon\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\t\ticon={faTwitter}\n\t\t\t\t\t\t\t\t\tclassName=\"userIcon twitterIcon\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\t\ticon={faYoutube}\n\t\t\t\t\t\t\t\t\tclassName=\"userIcon youtubeIcon\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"col login\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-signup\">\n\t\t\t\t\t\t\t\tSign Up\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h6>We keep everything</h6>\n\t\t\t\t\t\t\t\t\t<h3>Ready to Login</h3>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"form-input\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<div className=\"input-icon\">\n\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faUser} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"form-input\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<div className=\"input-icon\">\n\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={(faUser, faLock)} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-login\">\n\t\t\t\t\t\t\t\t\tLogin\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<GoogleFontLoader\n\t\t\t\tfonts={[\n\t\t\t\t\t{\n\t\t\t\t\t\tfont: \"Bungee Inline\",\n\t\t\t\t\t\t// weights: [400],\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t/>\n\t\t\t<GoogleFontLoader\n\t\t\t\tfonts={[\n\t\t\t\t\t{\n\t\t\t\t\t\tfont: \"Montserrat\",\n\t\t\t\t\t\t// weights: [400],\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t/>\n\t\t\t<GoogleFontLoader\n\t\t\t\tfonts={[\n\t\t\t\t\t{\n\t\t\t\t\t\tfont: \"Lobster\",\n\t\t\t\t\t\t// weights: [400],\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}